[ 기술면접 참고 ]

회사에 대한 질문 
객체지향, 절차지향 언어 비교, 각 대표적인 언어는? - 절차지향 : C언어 / 순차적인 처리가 중요 / 실행속도 빠름 / 유지보수 어려움 / 디버깅 어려움 - 객체지향 : Java, C++ / 기능별 모듈화, 중복연산 최소화 / 캡슐화, 상속(재활용), 다형성 / 처리속도 절차지향보다 느림 / 설계 잘 해야됨  - 절차지향은 데이터 중심, 객체지향은 기능(메소드) 중심  
데이터 타입이란? 데이터타입과 변수의 차이는? - 모든 변수에는 데이터 타입이 있다.  - 변수는 값을 저장할 수 있는 메모리상의 공간을 의미 - 변수의 타입에 따라 저장할 수 있는 값의 종류와 범위가 달라진다. 
Value type과 reference type은? primitive type : int, boolean, byte, short, long, float, double, char   - 실제 값 저장   - stack 메모리에 저장  reference type : 배열, 클래스….   - 참조 주소 저장  * Wrapper class 는 각 primitive type을 클래스로 만든 것   - 원시 타입을 객체로 사용해야하는 경우, 원시타입을 객체로 포장할 필요가 있다. Wrapper class는 특정 기본형 타입을 나타낸다. 예를 들어 Integer 클래스는 간단한 정수 값을 나타낸다.     - Wrapper 클래스는 산술연산을 위해 정의된 클래스가 아니기 때문에, 이 클래스의 인스턴스에 저장된 값은 변경이 불가능하다.   - Boxing : 원시타입을 Wrapper 클래스의 객체로 변경하는 과정       Integer age = new Integer(30);   - Unboxing : 각각의 객체를 기본 자료형으로 변경하여 사용하는 과정       int age2 = age.intValue();   String 클래스 - 문자열을 원시타입처럼 사용할 수 있도록 특별하게 처리함. 즉 String클래스는 일종의 원시타입처럼 사용가능하지만 원시타입에는 속하지 않는다. String str = “aaa”; 일때, aaa문자열이 직접 변수에 저장되는 것이 아니라, 문자열은 String 객체로 생성되고 변수는 String 객체를 참조하는 것. 
char type과 string type 차이 char는 primitive type이고 string은 reference type 이다. 
heap영역과 stack영역 비교 - data 영역에 프로그램의 전역변수와 정적변수가 저장된다. 프로그램 종료시 소멸 - stack 은 함수의 호출과 관계되는 지역변수, 매개변수 등의 값이 저장되는 메모리 공간이다. 함수 호출과 함께 할당, 함수 호출이 끝나면 소멸한다.  - heap 은 객체와 배열이 생성되는 공간, 참조타입들은 힙 영역에 주소형식으로 저장한다. GC 적용되는 메모리 공간이다. 
equals, == 차이 https://brunch.co.kr/@mystoryg/133 - == 연산자는 피연산자가 primitive type인 경우 값이 같은지 비교하고,    ref type이면 가리키는 주소가 같은지 검사한다. equals메소드는 내용이 같은지 검사한다.  equals메소드는 완전히 같은 객체를 가리키지 않아도 개발자가 true로 리턴시킬 수 있다. (오버라이드) 
equals의 구조 public boolean equals(Object obj){     return (this == obj;); } 
String a = “12345”와 String b = new String(“12345”); 의 차이 
a.euqlas(b) 의 답은?   a==b의 답은? true / false 
a = “54321”바꾸고 16번의 답은? false / false 
hashCode 란? https://minwan1.github.io/2018/07/03/2018-07-03-equals,hashcode/ 우선, hashCode() 메소드를 실행해서 리턴된 해시코드값이 값은지를 본다.  해시코드값이 다르면 다른 객체로 판단하고, 해시코드값이 같으면 equals()메소드로 다시 비교한다. 이 두개가 모두 맞아야 동등 객체로 판단한다.  동등객체인지는 set의 키를 기반으로 찾는 것이지, 객체의 참조값으로 찾는 것이 아니다. 그러므로 hashCode 값이 같다고 해서 객체의 참조 값이 같은것은 아니다. 
equals가 hashCode를 어떻게 이용하는지? equals() : 두 객체의 내용이 같은지 확인하는 메소드 hashCode() : 두 객체가 같은 객체인지 확인하는 메소드  equals()만 재정의해서는 안되고 반드시 equals()와 hashCode()를 같이 재정의해야 부작용이 없다.  equals() 메소드가 true 반환하면 두 객체의 hashCode값은 같아야한다. equals() 메소드가 false 반환하면 두 객체의 HashCode 값이 꼭 다를 필요는 없다. 
java의 메모리 구조에 대한 설명 https://hoonmaro.tistory.com/19  
string pool https://doohong.github.io/2018/03/04/java-string-pool/ == 을 사용해서 실제 값을 비교하고 싶을 때 intern() 메소드를 이용할 수 있다.  String a = “hello” String b = new String(“hello”); String c = b.intern(); 일때 a.equals(b) -> true / a==c -> true 
멤버변수와 지역변수는 언제 메모리에서 해제 될까 - Method(Static) Area에 저장되는 데이터이므로 프로그램 종료 시에 해제된다. 
heap 영역에 저장되는 변수는 언제 해제 될까 객체가 더이상 사용되지 않거나, null 로 선언시 해제 된다. 
참조타입과 값타임 
참조타입의 주소는 어디에 저장되나요 참조타입 변수는 힙영역이나 메소드영역의 객체 주소를 가진다. 
주소값은 왜 stack에 저장되나요 https://wanzargen.tistory.com/16?category=700063 



[ 자료구조 질문 참고 ] collection 관련 : https://gangnam-americano.tistory.com/41
자료구조 알고있는거 대답 List, Set, Queue, Stack, Tree… 
자료구조 선택하는 기준? 속도라던지 메모리라던지 
데이터베이스에서 데이터를 가져오거나 입력받은 데이터를 저장할때 어떤 자료구조를 사용하는지 기준이 있나요? 
List, Set, Map의 차이 https://brunch.co.kr/@springboot/57  java Collection의 주요 인터페이스는 List, Set, Map이 있다. 인터페이스를 구분하는 주요소는 “순서”, “데이터 중복 여부” - List : 순서O, 데이터중복O           - add(E e) / add(int index, E element) / set(int index, E element) / contains(Object o) / get(int index) / isEmpty() / size() / clear() / remove(int index) / remove(Object o)  - Set : 순서X, 중복X           - size() / isEmpty() / contains(Object o) / iterator() / toArray() / add(E e) / remove(Object o) / containsAll(Collection<?> c) / addAll(Collection<? extends E> c) / retainAll(Collection<?> c) / removeAll(Collection<?> c) / clear() / equals(Object o) / hashCode()  Stream API를 사용하여 List로 변환 가능 Set<String> set = new HashSet<>(); set.add(“1”); set.add(“2”); set.add(“3”); List<String> list = set.stream().collect(Collectors.toList()); System.out.println(list);  - Map : Key 중복X, Value 중복O size() / isEmpty() / containsKey(Object key) / containsValue(Object value) / get(Object key) / put(K key, V value) / remove(Object key) / putAll(Map<? extends K, ? extends V> m) / clear() / keySet() / values() / entrySet() / equals(Object o) / hashCode() / getOrDefault(Object key, V defaultValue) / ….  - HashMap Iterating Keys 이용시    for(Integer key : maps.keySet()){} Values 이용시    for(String value : maps.values(){} Entries이용시    for(Map.Entry<Integer, String> entry : maps.entrySet()){}  - LinkedHashMap : 입력된 순서를 기억하는 HashMap 
List, Set, Map 은 어떤 인터페이스를 구현하는지? List : ArrayList, LinkedList, Stack, Vector… Set : TreeSet, HashSet, Linked HashSet Map : HashMap, Hashtable, TreeMap, LinkedHashMap 
foreach 사용할 수 있는 자료구조는 어떠한 인터페이스를 상속받는지? foreach는 주어진 함수를 배열 요소 각각에 대해 실행 arr.forEach(function(element){    console.log(element); }) 
foreach사용 시 다음 데이터를 가져오기 위해 내부적으로 구현된 인터페이스는? 
Iterator와 Iterable의 차이는? Set, List, Queue 는 Collection을 구현하고 있으므로 Collection의 메소드 사용 가능 Collection은 Iterable이라는 인터페이스 상속함 Iterable인터페이스에 있는 메소드가 iterator() 즉, Collection 인터페이스가 Iterable 인터페이스를 확장했다는 것의 의미는 Iterator 인터페이스를 사용하여 데이터를 순차적으로 가져올 수 있다는 것 
Iterator()에서 구현해야하는 메소드는? - hasNext() : 추가 element 가 있는지 확인하는 메소드 - next() : 다음 element를 리턴하는 메소드 - remove() : element를 삭제하는 메소드 
배열은  Size가 변경될 수 있는가? - 배열은 크기 변경할 수 없다. 
만약 size가 10인 배열을 만들었는데 그 배열에 20개의 데이터를 넣거나 사이즈를 5로 줄이려면 어떻게 해야하는가? - 새 배열 만들어 복사한다. - ArrayList 
SIZE가 변경될 경우 어떤 자료구조 사용하는게 좋은가? - List형 자료구조(List 컬렉션) 
동적(가변) 자료구조 중 아는것 - ArrayList, LinkedList, Queue, Stack,   
Generic / non generic 타입의 차이 generics : 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시(실제 실행 전에)의 타입 체크를 해주는 기능이다. 객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의 번거로움이 줄어든다.  E(Element), K(Key), N(Number), T(Type), V(Value)  class Box<T>{ //지네릭클래스 생성   T item;   void setItem(T item){this.item = item;}   T getItem(){return item;} }  —————— //지네릭 클래스의 객체를 생성할 때는 참조변수와 생성자에 대입된 타입(매개변수화된 타입)이 일치해야 한다. Box<Apple> appleBox = new Box<Apple>(); //Box<Apple> appleBox = new Box<Banana>();  //에러! 참조변수와 생성자에 대입된 타입 불일치  ------------- 다른 예) List list = new ArrayList(); list.add(“hello”); String str = (String)list.get(0);   //타입변환 필요  List<String> list2 = new ArrayList<>(); list2.add("hello"); String str2 = list.get(0); //타입변환 불필요 
generic 타입의 자료구조는 어떤게 있는지 ArrayList<> 같은 
generic 타입의 장점, object 사용하면 안돼? https://walbatrossw.github.io/java/2018/02/17/java-basic-26-generics.html 타입변환이 불필요함! 
ArrayList와 LinkedList 의 차이 https://brunch.co.kr/@springboot/57 일반적으로 ArrayList는 LinkedList보다 검색이 빠르다. 또한 순차적 배열에 객체를 추가/삭제 하는 경우에도 ArrayList가 더 좋은 성능을 보인다. 반면에, 배열의 중간 위치에 추가될때 LinkedList는 Array의 크기를 조정하거나 인덱스를 업데이트할 필요가 없기 때문에 링크된 목록에서 객체의 추가, 제거 작업은 LinkedList가 더 빠르다. 그러나, LinkedList는 앞뒤 두개의 참조를 저장하기 때문에 ArrayList 보다 더 많은 메모리 영역을 차지한다. 
데이터를 순차적으로 찾을때 빠른것은? ArrayList ArrayList에서는 무작위 접근(random access)이 가능하지만, LinkedList에서는 순차접근(sequential access) 만이 가능합니다. 
데이터를 빈번하게 추가하거나 삭제할때 적당한 타입은? LinkedList 
ArrayList, List에서 중간에 데이터를 삭제할 때 내부적으로 어떻게 동작하는지 아나? http://www.nextree.co.kr/p6506/ 
둘중에 검색 속도가 가장 빠른것은? 
List에서 검색이 제일 느린 케이스는 어떤것이냐? LinkedList? 
LinkedList는 이전 Node와 이후 Node의 정보를 어떻게 아느냐?
LinkedList는 중간에 데이터 삽입시 어떻게 동작하는지 아느냐?(삽입, 삭제 순)
List 와 set의 차이 List는 중복 허용, Set은 Key의 중복 불가 
중복을 허용하지 않는다면 내부적으로 동일하다는 것을 어떻게 확인할까? https://minwan1.github.io/2018/07/03/2018-07-03-equals,hashcode/ https://yaboong.github.io/java/2018/05/26/java-memory-management/ 내부적으로 해당 객체의 hashCode()와 equals()를 실행해본다. 먼저 hashCode() 메소드를 호출해서 hashCode가 같은지 판별한다. 만약 hashCode가 같으면, equals 메소드를 실행해보고 같은지 판별한다. 만약 같지 않으면, 두 객체는 같지 않은 것이므로 equals메소드를 실행하지 않는다. 
같다 는 판단 기준을 바꿀수 있는가? equals()과 hashCode()의 재정의를 통해? 
Map 은 다른 자료구조와 어떤 차이가 있는가? Key와 Value 매칭 형식, 순차적 X,  
Map 을 사용해야하는 경우는 어떤 경우가 있는가? 
알고있는 map에는 어떤게 있는가? HashMap, TreeMap HashMap은 데이터의 정렬이라는게 없음 TreeMap은 데이터의 Key를 기준으로 정렬할때 씀(무작위로 key-value 넣어도 정렬됨) 
HashTable과 HashMap은 무엇이 다른가? https://velog.io/@adam2/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94 - HashMap Map<String, String> map = new HashMap<String, String>(); HashMap은 Map 인터페이스 계열의 대표적인 클래스이다. Key와 Value로 데이터를 관리하며 키를 이용하여 데이터를 추출할 수 있다. put(), get() 으로 삽입, 추출  -HashTable(동기화를 위해 사용함, 동기화? 다중쓰레드에서 사용 시 필요, 락 걸기때문에 속도 느려짐) Hash함수를 사용하여 key가 해시함수의 input이 된다. hash값은 데이터가 저장되어있는 버킷(슬롯)의 주소값  Hashtable h = new Hashtable();//객체생성 h.put(“name”, new String(“홍길동”));//데이터삽입 String name = (String)h.get(“name”);//키를 이용한 추출 (다운캐스팅 필요) 일반적으로 동기화가 필요없다면 HashMap을, 동기화가 필요하다면 HashTable 사용하면 된다. HashTable에 데이터를 삽입할 때는 키, 값 필요 put(), get() 으로 삽입, 추출 서로 다른 key가 같은 hash 값을 갖게 되는 경우 이를 해시 충돌이라고 한다.  - Hashtable은 동기화 처리라는 비용때문에 HashMap에 비해 더 느리다. 
Hashing 이란 무엇인가?  hashtable에서 사용하는 key를 고정된 길이의 hash로 변경해주는데 이 과정을 hashing이라고 한다. 
Hash값이 중복될수도 있는데 Hash의 중복을 피할 수 있는 방법은?(Hash 충돌)  - Chaining(체이닝) : 저장소(버킷, 슬롯)에서 충돌이 일어나면 기존값과 새로운값을 연결리스트를 이용해 연결시키는 방법 - Open Addressing(개방주소법) : 비어있는 해시를 찾아 데이터를 저장하는 기법 - 해시함수 매핑 개선 
Hashing 할 때 장점 
Queue 와 Stack의 차이 Queue = FIFO / Stack = LIFO  
Queue와 Stack 의 사용 예 Queue : 프린터? Stack : 함수 실행 ?? 재귀함수? 
Queue와 Stack은 내부적으로 어떤 자료구조를 활용하는지 Queue : 배열, LinkedList / offer poll Stack : 배열, LinkedList / push pop peek 
왜 그 자료구조를 이용할까? 
인스턴스 메세지를 등록된 순서대로 발송한다면 어떤 자료구조를 이용할까? Queue 
배열이나 List를 이용하면 안되나?  배열 : 가변적이지 않음. List :  
Queue 선입선출로 메세지 발송하는데 긴급발송건이나 예약발송건이 있으면 먼저 보내야해. 우선순위가 있는건 Queue에서 가능하냐? 어떤 자료구조 이용하냐? 우선순위 Queue => Comparable 인터페이스 or Compartor 이용 , Collections.reverseOrder(); 주로 사용  Comparable 인터페이스는 compareTo() 메소드 정의하고 있음 기본 정렬 기준과 다르게 정렬하고 싶다면 Comparator 사용 
Tree는 어떤 경우에 사용하나? https://ju-nam2.tistory.com/25 - 계층 구조를 이루는 경우 - 빠른 탐색 시간을 위해  https://javacan.tistory.com/entry/19 - 데이터의 집합을 정렬된 상태로 유지해야하는 경우 
다른 자료구조와 어떤 차이냐? 
B-tree에 대해 설명할 수 있냐? 내부적으로 데이터가 어떻게 저장되냐? 이진트리는 노드의 최대 차수가 2인 트리 왜 이진트리를 쓰냐?   https://ju-nam2.tistory.com/25       
이진탐색트리에 대해 설명할 수 있나? 이진탐색트리는 이진트리에서 조건이 추가된 것 루트노드의 왼쪽자식은 루트노드보다 크기가 작다. 루트노드의 오른쪽자식은 루트노드보다 크기가 크다. 
그냥  B-tree와 이진탐색트리 내부적인 차이 - 이진트리 구현 to Array : 시간복잡도 줄일 수 있음(인덱스 알면 바로 찾아갈 수 있음), 정의된 크기말고 진짜 크기를 알 수 없다. - 이진트리 구현 to LinkedList : 직관적인 접근법, 추가/삭제 시 빠름    class Node{     int data;     Node left;     Node right;    }  
이진검색트리에서 검색속도가 가장 느린 케이스는? 
동기화를 지원하는 자료구조는 어떤게 있냐? HashTable, Vector 
동기화를 지원하는 자료구조는 왜, 언제 필요한가? 멀티쓰레드 프로그래밍에서는 하나의 객체를 여러 쓰레드가 동시에 접근할 수 있기 때문에 데이터의 일관성을 유지하기 위해서는 동기화가 필요하다. 
멀티쓰레드 환경에서 동기화를 지원하지 않으면 어떤문제 발생하냐? https://m.blog.naver.com/PostView.nhn?blogId=qbxlvnf11&logNo=220837510956&proxyReferer=https:%2F%2Fwww.google.com%2F 
람다식(함수를 변수처럼 사용) https://devjjo.tistory.com/33 람다식은 인터페이스 변수에 대입된다. 이 말은 람다식은 인터페이스의 익명 구현 객체를 생성한다는 뜻    (인터페이스 변수 = 람다식;  인 개념) (int a) -> {System.out.println(a);} (x, y) -> {return x+y;}   // 이거 대신 람다식에서는 return을 안쓰는게 정석 = (x, y) -> x+y 코드의 간결성  기존에는 메소드 형태로 객체 혹은 클래스를 통해서만 접근이 가능하고 메소드 그 자체를 변수로 사용하진 못함. 파라미터로 메소드를 사용하거나 리턴값을 함수로 받을 수도 있다.  https://yunyoung1819.tistory.com/130   >> 변환하기 예제 https://yunyoung1819.tistory.com/116?category=306389 >> 변환하기 예제 2 
Queue 구현(배열, 연결리스트) https://hyeonstorage.tistory.com/263