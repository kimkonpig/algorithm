import java.io.*;
import java.util.StringTokenizer;

public class M10828 {
    public static int[] stack;
    public static int size = 0;

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());
        stack = new int[n];

        StringTokenizer st;

        while(n > 0){
            n--;
            st = new StringTokenizer(br.readLine(), " ");

            switch (st.nextToken()){
                case "push" :
                    push(Integer.parseInt(st.nextToken()));
                    break;

                case "pop" :
                    bw.write(pop() + "\n");
                    break;

                case "top" :
                    bw.write(top() + "\n");
                    break;

                case "size" :
                    bw.write(size() + "\n");
                    break;

                case "empty" :
                    bw.write(empty() + "\n");
                    break;
            }
        }

        bw.flush();
        bw.close();
    }

    /* num을 스택에 넣는 연산 */
    public static void push(int num){
        stack[size] = num;
        size++;
    }

    /* 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다.
    만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력 */
    public static int pop(){
        if(size == 0){
            return -1;
        }else{
            int res = stack[size-1];
            stack[size-1] = 0;
            size--;
            return res;
        }
    }

    /* 스택에 들어있는 정수의 개수를 출력 */
    public static int size(){
        return size;
    }

    /* 스택이 비어있으면 1, 아니면 0을 출력 */
    public static int empty(){
        if(size == 0){
            return 1;
        }else{
            return 0;
        }
    }

    /* 스택의 가장 위에 있는 정수를 출력한다.
    만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력 */
    public static int top(){
        if(size == 0){
            return -1;
        }else{
            return stack[size-1];
        }
    }
}
